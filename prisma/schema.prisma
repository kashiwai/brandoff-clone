// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./turso.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  cart     Cart?
  reviews  Review[]
  wishlist Wishlist[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  logo        String?
  country     String?
  featured    Boolean   @default(false)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brands")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  price       Float
  compareAt   Float?
  cost        Float?
  sku         String      @unique
  barcode     String?
  quantity    Int         @default(0)
  active      Boolean     @default(true)
  featured    Boolean     @default(false)
  images      Image[]
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?      @relation(fields: [brandId], references: [id])
  variants    Variant[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlist    Wishlist[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([brandId])
  @@index([slug])
  @@map("products")
}

model Variant {
  id         String      @id @default(cuid())
  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  name       String
  sku        String      @unique
  price      Float
  quantity   Int         @default(0)
  image      String?
  attributes String?
  orderItems OrderItem[]
  cartItems  CartItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([productId])
  @@map("variants")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@map("images")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @default(cuid())
  userId          String?
  user            User?         @relation(fields: [userId], references: [id])
  email           String
  phone           String?
  status          String        @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  paymentStatus   String        @default("PENDING")
  paymentMethod   String?
  paymentIntentId String?
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  shippingAddress String
  billingAddress  String?
  trackingNumber  String?
  notes           String?
  items           OrderItem[]
  returns         Return[]      // 返品・交換リクエスト
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id         String       @id @default(cuid())
  orderId    String
  order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product      @relation(fields: [productId], references: [id])
  variantId  String?
  variant    Variant?     @relation(fields: [variantId], references: [id])
  price      Float
  quantity   Int
  returnItems ReturnItem[] // 返品アイテム
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  variant   Variant? @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@map("wishlists")
}

// 返品・交換管理
model Return {
  id             String        @id @default(cuid())
  returnNumber   String        @unique @default(cuid())
  orderId        String
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type           String        // RETURN（返品） or EXCHANGE（交換）
  status         String        @default("REQUESTED") // REQUESTED, APPROVED, REJECTED, SHIPPED, RECEIVED, COMPLETED, CANCELLED
  reason         String        // 返品理由
  description    String?       // 詳細説明

  // 顧客情報
  customerEmail  String
  customerPhone  String?

  // 返品ラベル情報
  returnLabel    String?       // 返品ラベルURL
  trackingNumber String?       // 追跡番号

  // 承認情報
  approvedBy     String?       // 承認者
  approvedAt     DateTime?     // 承認日時
  rejectedReason String?       // 却下理由
  receivedAt     DateTime?     // 受領日時
  completedAt    DateTime?     // 完了日時

  returnItems    ReturnItem[]  // 返品アイテム

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([orderId])
  @@index([status])
  @@map("returns")
}

model ReturnItem {
  id          String     @id @default(cuid())
  returnId    String
  return      Return     @relation(fields: [returnId], references: [id], onDelete: Cascade)
  orderItemId String
  orderItem   OrderItem  @relation(fields: [orderItemId], references: [id])
  quantity    Int        // 返品数量
  condition   String?    // 商品状態: NEW, OPENED, DAMAGED
  notes       String?    // 備考
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([returnId])
  @@map("return_items")
}
